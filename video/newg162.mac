;Copyright (C) 1997-2008 ZSNES Team ( zsKnight, _Demo_, pagefault, Nach )
;
;http://www.zsnes.com
;http://sourceforge.net/projects/zsnes
;https://zsnes.bountysource.com
;
;This program is free software; you can redistribute it and/or
;modify it under the terms of the GNU General Public License
;version 2 as published by the Free Software Foundation.
;
;This program is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU General Public License for more details.
;
;You should have received a copy of the GNU General Public License
;along with this program; if not, write to the Free Software
;Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



; Finish up parttile

%macro preparet4ba 0
    shl cx,5
    add ecx,ecx
    add ecx,[vcache4b]
%endmacro

%macro preparet2ba 0
    shl cx,4
    shl ecx,2
    add ecx,[vcache2b]
%endmacro

%macro preparet8ba 0
    shl cx,6
    add ecx,[vcache8b]
%endmacro

%macro preparet2batile 0
    shl ecx,8
    add ecx,[vcache2bs]
%endmacro

%macro preparet4batile 0
    shl ecx,8
    add ecx,[vcache4bs]
%endmacro

%macro preparet8batile 0
    shl ecx,8
    add ecx,[vcache8bs]
%endmacro

%macro test4ba 0
    and ecx,2047
    test dword[vidmemch4+ecx*2],0FFFFh
%endmacro

%macro test2ba 0
    and ecx,4095
    add edx,dword[mode0add]
    test dword[vidmemch2+ecx],0FFh
%endmacro

%macro test8ba 0
    and ecx,1023
    test dword[vidmemch8+ecx*4],0FFFFFFFFh
%endmacro

%macro tilenormal 2
    mov ebx,[ecx+%2]
    mov [edi+%1],ebx
    mov ebx,[ecx+%2+4]
    mov [edi+%1+4],ebx
    mov ebx,[ecx+%2+8]
    mov [edi+%1+8],ebx
    mov ebx,[ecx+%2+12]
    mov [edi+%1+12],ebx
%endmacro

%macro tilenormalb 1
    cmp word[ecx+%1],0FFFFh
    je short %%nott
    mov bx,[ecx+%1]
    mov [edi+%1],bx
%%nott
%endmacro

%macro tilenormals 2
    mov ebx,[ecx+%2]
    mov [edi+%1+75036*2],ebx
    mov ebx,[ecx+%2+4]
    mov [edi+%1+4+75036*2],ebx
    mov ebx,[ecx+%2+8]
    mov [edi+%1+8+75036*2],ebx
    mov ebx,[ecx+%2+12]
    mov [edi+%1+12+75036*2],ebx
%endmacro

%macro tilenormalbs 1
    cmp word[ecx+%1],0FFFFh
    je short %%nott
    mov bx,[ecx+%1]
    mov [edi+%1+75036*2],bx
%%nott
%endmacro

%macro tilenormalt 2
    mov ebx,[ecx+%2]
    or ebx,[UnusedBit]
    mov [edi+%1],ebx
    mov ebx,[ecx+%2+4]
    or ebx,[UnusedBit]
    mov [edi+%1+4],ebx
    mov ebx,[ecx+%2+8]
    or ebx,[UnusedBit]
    mov [edi+%1+8],ebx
    mov ebx,[ecx+%2+12]
    or ebx,[UnusedBit]
    mov [edi+%1+12],ebx
%endmacro

%macro tilenormalbt 1
    cmp word[ecx+%1],0FFFFh
    je short %%nott
    mov bx,[ecx+%1]
    or bx,[UnusedBit]
    mov [edi+%1],bx
%%nott
%endmacro

%macro tilenormalmsnt 2
    mov ebx,[ecx+%2]
    mov [edi+%1],ebx
    mov [edi+%1+75036*2],ebx
    mov ebx,[ecx+%2+4]
    mov [edi+%1+4],ebx
    mov [edi+%1+4+75036*2],ebx
    mov ebx,[ecx+%2+8]
    mov [edi+%1+8],ebx
    mov [edi+%1+8+75036*2],ebx
    mov ebx,[ecx+%2+12]
    mov [edi+%1+12],ebx
    mov [edi+%1+12+75036*2],ebx
%endmacro

%macro tilenormalbmsnt 1
    cmp word[ecx+%1],0FFFFh
    je short %%nott
    mov bx,[ecx+%1]
    mov [edi+%1],bx
    mov [edi+%1+75036*2],bx
%%nott
%endmacro

%macro tilenormalmst 2
    mov ebx,[ecx+%2]
    mov [edi+%1+75036*2],ebx
    or ebx,[UnusedBit]
    mov [edi+%1],ebx
    mov ebx,[ecx+%2+4]
    mov [edi+%1+4+75036*2],ebx
    or ebx,[UnusedBit]
    mov [edi+%1+4],ebx
    mov ebx,[ecx+%2+8]
    mov [edi+%1+8+75036*2],ebx
    or ebx,[UnusedBit]
    mov [edi+%1+8],ebx
    mov ebx,[ecx+%2+12]
    mov [edi+%1+12+75036*2],ebx
    or ebx,[UnusedBit]
    mov [edi+%1+12],ebx
%endmacro

%macro tilenormalbmst 1
    cmp word[ecx+%1],0FFFFh
    je short %%nott
    mov bx,[ecx+%1]
    mov [edi+%1+75036*2],bx
    or bx,[UnusedBit]
    mov [edi+%1],bx
%%nott
%endmacro

%macro drawtileng16b 12
    ; tile value : bit 15 = flipy, bit 14 = flipx, bit 13 = priority value
    ;              bit 10-12 = palette, 0-9=tile#
    mov ebx,[ng16bbgval]
    mov dl,ch
    inc dword[bg1drwng+ebx*4]
    and ecx,3FFh
    and edx,1Fh
    add ecx,[ngptrdat2]
    mov edx,[%6+edx*4]
    %7
    jnz near %%docache
    cmp byte[%9+ecx],dl
    je short %%returnfromcache
    mov [%9+ecx],dl
    call %10
%%returnfromcache
    cmp byte[%1+ecx],2
    je near %5
    cmp byte[%1+ecx],0
    je near %%parttile
    %2
    ; start drawing from ecx
    test dword[vrama+eax],4000h
    jz short %%noflipxfull
    add ecx,128
%%noflipxfull
    test dword[vrama+eax],8000h
    jnz near %%flipyfull
    %11 0,0
    %11 288*2,16
    %11 288*4,32
    %11 288*6,48
    %11 288*8,64
    %11 288*10,80
    %11 288*12,96
    %11 288*14,112
    jmp %5
%%flipyfull
    %11 288*14,0
    %11 288*12,16
    %11 288*10,32
    %11 288*8,48
    %11 288*6,64
    %11 288*4,80
    %11 288*2,96
    %11 0,112
    jmp %5
%%parttile
    %2
    ; start drawing from ecx to edi
    test word[vrama+eax],4000h
    jz short %%noflipxpart
    add ecx,128
%%noflipxpart
    test word[vrama+eax],8000h
    jnz near %%flipypart
    mov dword[tleftnb],8
%%nextb
    %12 0
    %12 2
    %12 4
    %12 6
    %12 8
    %12 10
    %12 12
    %12 14
    add ecx,16
    add edi,288*2
    dec dword[tleftnb]
    jnz near %%nextb
    sub edi,288*2*8
    jmp %5
%%flipypart
    add edi,288*2*7
    mov dword[tleftnb],8
%%nextbm
    %12 0
    %12 2
    %12 4
    %12 6
    %12 8
    %12 10
    %12 12
    %12 14
    add ecx,16
    sub edi,288*2
    dec dword[tleftnb]
    jnz near %%nextbm
    add edi,288*2
%5
    mov ebx,[ng16bbgval]
    add ax,2
    inc dword[bg1totng+ebx*4]
    add edi,16
    test eax,03Fh
    jz %%tileadd
%%next
    dec byte[tleftn]
    jnz near %4
    pop ebx
    ret
%%docache
    call %3
    mov [%9+ecx],dl
    call %10
    jmp %%returnfromcache
%%tileadd
    add ax,[bgtxadd]
    jmp %%next
%endmacro

%macro drawtileng16x1616b 12
    ; tile value : bit 15 = flipy, bit 14 = flipx, bit 13 = priority value
    ;              bit 10-12 = palette, 0-9=tile#
    mov ebx,[ng16bbgval]
    mov dl,ch
    inc dword[bg1drwng+ebx*4]
    and ecx,3FFh
    and edx,1Fh
    add ecx,[ngptrdat2]
    add cx,[taddnfy16x16]
    test dword[vrama+eax],8000h
    jz short %%noflipy
    add cx,[taddfy16x16]
%%noflipy
    test dword[vrama+eax],4000h
    jz short %%noflipx
    inc cx
%%noflipx
%%nexttile
    push ecx
    push edx
    mov edx,[%6+edx*4]
    %7
    jnz near %%docache
    cmp byte[%9+ecx],dl
    je short %%returnfromcache
    mov [%9+ecx],dl
    call %10
%%returnfromcache
    cmp byte[%1+ecx],2
    je near %%done
    cmp byte[%1+ecx],0
    je near %%parttile
    %2
    ; start drawing from ecx
    test dword[vrama+eax],4000h
    jz short %%noflipxfull
    add ecx,128
%%noflipxfull
    test dword[vrama+eax],8000h
    jnz near %%flipyfull
    %11 0,0
    %11 288*2,16
    %11 288*4,32
    %11 288*6,48
    %11 288*8,64
    %11 288*10,80
    %11 288*12,96
    %11 288*14,112
    jmp %%done
%%flipyfull
    %11 288*14,0
    %11 288*12,16
    %11 288*10,32
    %11 288*8,48
    %11 288*6,64
    %11 288*4,80
    %11 288*2,96
    %11 0,112
    jmp %%done
%%parttile
    %2
    ; start drawing from ecx to edi
    test word[vrama+eax],4000h
    jz short %%noflipxpart
    add ecx,128
%%noflipxpart
    test word[vrama+eax],8000h
    jnz near %%flipypart
    mov dword[tleftnb],8
%%nextb
    %12 0
    %12 2
    %12 4
    %12 6
    %12 8
    %12 10
    %12 12
    %12 14
    add ecx,16
    add edi,288*2
    dec dword[tleftnb]
    jnz near %%nextb
    sub edi,288*2*8
    jmp %%done
%%flipypart
    add edi,288*2*7
    mov dword[tleftnb],8
%%nextbm
    %12 0
    %12 2
    %12 4
    %12 6
    %12 8
    %12 10
    %12 12
    %12 14
    add ecx,16
    sub edi,288*2
    dec dword[tleftnb]
    jnz near %%nextbm
    add edi,288*2
%%done
    pop edx
    pop ecx
    inc cx
    test dword[vrama+eax],4000h
    jz short %%noflipxb
    sub cx,2
%%noflipxb
    add edi,16
    xor dword[switch16x16],1
    jnz near %%nexttile
%%ntile
    mov ebx,[ng16bbgval]
    add ax,2
    inc dword[bg1totng+ebx*4]
    test eax,03Fh
    jz %%tileadd
%%next
    dec byte[tleftn]
    jnz near %4
    pop ebx
    ret
%5
    add edi,32
    jmp %%ntile
%%docache
    call %3
    mov [%9+ecx],dl
    call %10
    jmp %%returnfromcache
%%tileadd
    add ax,[bgtxadd]
    jmp %%next
%endmacro

%macro procpixels 3
    mov bl,[esi+%2]
    mov cl,[esi+%1]
    add bl,dl
    add cl,dl
    mov bx,[eax+ebx*2]
    shl ebx,16
    mov bx,[eax+ecx*2]
    mov [edi+%3],ebx
    xor ebx,ebx
%endmacro

%macro procpixelst 3
    mov bl,[esi+%1]
    add bl,dl
    test bl,%3
    jz short %%nodraw
    mov cx,[eax+ebx*2]
    mov [edi+%2],cx
%%nodraw
%endmacro

%macro procpixelstr 3
    mov bl,[esi+%2]
    mov cl,[esi+%1]
    add bl,dl
    add cl,dl
    mov bx,[eax+ebx*2+512]
    shl ebx,16
    mov bx,[eax+ecx*2+512]
    mov [edi+%3],ebx
    xor ebx,ebx
%endmacro

%macro procpixelstt 3
    mov bl,[esi+%1]
    add bl,dl
    test bl,%3
    jz short %%nodraw
    mov cx,[eax+ebx*2+512]
    mov [edi+%2],cx
%%nodraw
%endmacro

%macro procpixelsmst 3
    mov bl,[esi+%2]
    mov cl,[esi+%1]
    add bl,dl
    add cl,dl
    mov bx,[eax+ebx*2+512]
    shl ebx,16
    mov bx,[eax+ecx*2+512]
    mov [edi+%3],ebx
    and ebx,[UnusedBitXor]
    mov [edi+%3+75036*2],ebx
    xor ebx,ebx
%endmacro

%macro procpixelstmst 3
    mov bl,[esi+%1]
    add bl,dl
    test bl,%3
    jz short %%nodraw
    mov cx,[eax+ebx*2+512]
    mov [edi+%2],cx
    and cx,[UnusedBitXor]
    mov [edi+%2+75036*2],cx
%%nodraw
%endmacro

%macro procpixelsmsnt 3
    mov bl,[esi+%2]
    mov cl,[esi+%1]
    add bl,dl
    add cl,dl
    mov bx,[eax+ebx*2]
    shl ebx,16
    mov bx,[eax+ecx*2]
    mov [edi+%3],ebx
    mov [edi+%3+75036*2],ebx
    xor ebx,ebx
%endmacro

%macro procpixelstmsnt 3
    mov bl,[esi+%1]
    add bl,dl
    test bl,%3
    jz short %%nodraw
    mov cx,[eax+ebx*2]
    mov [edi+%2],cx
    mov [edi+%2+75036*2],cx
%%nodraw
%endmacro

%macro procpixelss 3
    mov bl,[esi+%2]
    mov cl,[esi+%1]
    add bl,dl
    add cl,dl
    mov bx,[eax+ebx*2]
    shl ebx,16
    mov bx,[eax+ecx*2]
    mov [edi+%3+75036*2],ebx
    xor ebx,ebx
%endmacro

%macro procpixelsts 3
    mov bl,[esi+%1]
    add bl,dl
    test bl,%3
    jz short %%nodraw
    mov cx,[eax+ebx*2]
    mov [edi+%2+75036*2],cx
%%nodraw
%endmacro

%macro drawlineng16b 10
    ; tile value : bit 15 = flipy, bit 14 = flipx, bit 13 = priority value
    ;              bit 10-12 = palette, 0-9=tile#
    mov ebx,[ng16bbgval]
    mov dl,ch
    inc dword[bg1drwng+ebx*4]
    and ecx,3FFh
    and edx,1Fh
    add ecx,[ngptrdat2]
    mov edx,[%6+edx*4]
    %7
    jnz near %%docache
%%returnfromcache
    cmp byte[%1+ecx],2
    je near %5
    cmp byte[%1+ecx],0
    je near %%parttile
    jmp %%parttile
    %2
    ; start drawing from ecx
    test dword[vrama+eax],8000h
    jz short %%notflipyfull
    add ecx,[flipyposng]
    jmp %%yesflipyfull
%%notflipyfull
    add ecx,[yposng]
%%yesflipyfull
    test dword[vrama+eax],4000h
    jnz near %%flipxfull
    push eax
    mov esi,ecx
    xor ecx,ecx
    xor ebx,ebx
    mov eax,[CPalPtrng]
    %9 0,1,0
    %9 2,3,4
    %9 4,5,8
    %9 6,7,12
    pop eax
    jmp %5
%%flipxfull
    push eax
    mov esi,ecx
    xor ecx,ecx
    xor ebx,ebx
    mov eax,[CPalPtrng]
    %9 7,6,0
    %9 5,4,4
    %9 3,2,8
    %9 1,0,12
    pop eax
    jmp %5
%%parttile
    %2
    ; start drawing from ecx to edi
    test word[vrama+eax],8000h
    jz short %%noflipypart
    add ecx,[flipyposng]
    jmp %%yesflipypart
%%noflipypart
    add ecx,[yposng]
%%yesflipypart
    test word[vrama+eax],4000h
    jnz near %%flipxpart
    push eax
    mov eax,[CPalPtrng]
    mov esi,ecx
    xor ebx,ebx
    %10 0,0,%8
    %10 1,2,%8
    %10 2,4,%8
    %10 3,6,%8
    %10 4,8,%8
    %10 5,10,%8
    %10 6,12,%8
    %10 7,14,%8
    pop eax
    jmp %5
%%flipxpart
    push eax
    mov eax,[CPalPtrng]
    mov esi,ecx
    xor ebx,ebx
    %10 7,0,%8
    %10 6,2,%8
    %10 5,4,%8
    %10 4,6,%8
    %10 3,8,%8
    %10 2,10,%8
    %10 1,12,%8
    %10 0,14,%8
    pop eax
%5
    mov ebx,[ng16bbgval]
    add ax,2
    inc dword[bg1totng+ebx*4]
    add edi,16
    test eax,03Fh
    jz %%tileadd
%%next
    dec byte[tleftn]
    jnz near %4
    pop ebx
    cmp byte[curmosaicsz],1
    jne near domosaicng16b
    ret
%%docache
    call %3
    jmp %%returnfromcache
%%tileadd
    add ax,[bgtxadd]
    jmp %%next
%endmacro

%macro drawlineng16x1616b 10
    ; tile value : bit 15 = flipy, bit 14 = flipx, bit 13 = priority value
    ;              bit 10-12 = palette, 0-9=tile#
    mov ebx,[ng16bbgval]
    mov dl,ch
    inc dword[bg1drwng+ebx*4]
    and ecx,3FFh
    and edx,1Fh
    add ecx,[ngptrdat2]
    add cx,[taddnfy16x16]
    test dword[vrama+eax],8000h
    jz short %%noflipy
    add cx,[taddfy16x16]
%%noflipy
    test dword[vrama+eax],4000h
    jz short %%noflipx
    inc cx
%%noflipx
%%nexttile
    push ecx
    push edx
    mov edx,[%6+edx*4]
    %7
    jnz near %%docache
%%returnfromcache
    cmp byte[%1+ecx],2
    je near %%done
    cmp byte[%1+ecx],0
    je near %%parttile
    %2
    ; start drawing from ecx
    test word[vrama+eax],8000h
    jz short %%noflipyfull
    add ecx,[flipyposng]
    jmp %%yesflipyfull
%%noflipyfull
    add ecx,[yposng]
%%yesflipyfull
    test dword[vrama+eax],4000h
    jnz near %%flipxfull
    push eax
    mov esi,ecx
    xor ecx,ecx
    xor ebx,ebx
    mov eax,[CPalPtrng]
    %9 0,1,0
    %9 2,3,4
    %9 4,5,8
    %9 6,7,12
    pop eax
    jmp %%done
%%flipxfull
    push eax
    mov esi,ecx
    xor ecx,ecx
    xor ebx,ebx
    mov eax,[CPalPtrng]
    %9 7,6,0
    %9 5,4,4
    %9 3,2,8
    %9 1,0,12
    pop eax
    jmp %%done
%%parttile
    %2
    ; start drawing from ecx to edi
    test word[vrama+eax],8000h
    jz short %%noflipypart
    add ecx,[flipyposng]
    jmp %%yesflipypart
%%noflipypart
    add ecx,[yposng]
%%yesflipypart
    test word[vrama+eax],4000h
    jnz near %%flipxpart
    push eax
    mov eax,[CPalPtrng]
    mov esi,ecx
    xor ebx,ebx
    %10 0,0,%8
    %10 1,2,%8
    %10 2,4,%8
    %10 3,6,%8
    %10 4,8,%8
    %10 5,10,%8
    %10 6,12,%8
    %10 7,14,%8
    pop eax
    jmp %%done
%%flipxpart
    push eax
    mov eax,[CPalPtrng]
    mov esi,ecx
    xor ebx,ebx
    %10 7,0,%8
    %10 6,2,%8
    %10 5,4,%8
    %10 4,6,%8
    %10 3,8,%8
    %10 2,10,%8
    %10 1,12,%8
    %10 0,14,%8
    pop eax
%%done
    pop edx
    pop ecx
    inc cx
    test dword[vrama+eax],4000h
    jz short %%noflipxb
    sub cx,2
%%noflipxb
    add edi,16
    xor dword[switch16x16],1
    jnz near %%nexttile
%%ntile
    mov ebx,[ng16bbgval]
    add ax,2
    inc dword[bg1totng+ebx*4]
    test eax,03Fh
    jz %%tileadd
%%next
    dec byte[tleftn]
    jnz near %4
    pop ebx
    cmp byte[curmosaicsz],1
    jne near domosaicng16b
    ret
%5
    add edi,32
    jmp %%ntile
%%docache
    call %3
    jmp %%returnfromcache
%%tileadd
    add ax,[bgtxadd]
    jmp %%next
%endmacro

%macro procpixels16x8 3
    mov bl,[esi+%2]
    mov cl,[esi+%1]
    add bl,dl
    add cl,dl
    mov bx,[eax+ebx*2]
    mov [edi+%3+75036*4],bx
    mov bx,[eax+ecx*2]
    mov [edi+%3],bx
    xor ebx,ebx
%endmacro

%macro procpixelst16x8 3
    mov bl,[esi+%1]
    add bl,dl
    test bl,%3
    jz short %%nodraw
    mov cx,[eax+ebx*2]
    mov [edi+%2],cx
%%nodraw
%endmacro

%macro procpixelstr16x8 3
    mov bl,[esi+%2]
    mov cl,[esi+%1]
    add bl,dl
    add cl,dl
    mov bx,[eax+ebx*2+512]
    mov [edi+%3+75036*4],bx
    mov bx,[eax+ecx*2+512]
    mov [edi+%3],bx
    xor ebx,ebx
%endmacro

%macro procpixelstt16x8 3
    mov bl,[esi+%1]
    add bl,dl
    test bl,%3
    jz short %%nodraw
    mov cx,[eax+ebx*2+512]
    mov [edi+%2],cx
%%nodraw
%endmacro

%macro procpixelsmst16x8 3
    mov bl,[esi+%2]
    mov cl,[esi+%1]
    add bl,dl
    add cl,dl
    mov bx,[eax+ebx*2+512]
    mov [edi+%3+75036*4],bx
    and ebx,[UnusedBitXor]
    mov [edi+%3+75036*6],bx
    mov bx,[eax+ecx*2+512]
    mov [edi+%3],bx
    and ebx,[UnusedBitXor]
    mov [edi+%3+75036*2],bx
    xor ebx,ebx
%endmacro

%macro procpixelstmst16x8 3
    mov bl,[esi+%1]
    add bl,dl
    test bl,%3
    jz short %%nodraw
    mov cx,[eax+ebx*2+512]
    mov [edi+%2],cx
    and cx,[UnusedBitXor]
    mov [edi+%2+75036*2],cx
%%nodraw
%endmacro

%macro procpixelsmsnt16x8 3
    mov bl,[esi+%2]
    mov cl,[esi+%1]
    add bl,dl
    add cl,dl
    mov bx,[eax+ebx*2]
    mov [edi+%3+75036*4],bx
    mov [edi+%3+75036*6],bx
    mov bx,[eax+ecx*2]
    mov [edi+%3],bx
    mov [edi+%3+75036*2],bx
    xor ebx,ebx
%endmacro

%macro procpixelstmsnt16x8 3
    mov bl,[esi+%1]
    add bl,dl
    test bl,%3
    jz short %%nodraw
    mov cx,[eax+ebx*2]
    mov [edi+%2],cx
    mov [edi+%2+75036*2],cx
%%nodraw
%endmacro

%macro procpixels16x8b 3
    mov bl,[esi+%2]
    add bl,dl
    mov cx,[eax+ebx*2]
    mov [edi+%3],cx
%endmacro

%macro procpixelst16x8b 3
  %if %2<8
    mov bl,[esi+%1]
    add bl,dl
    test bl,%3
    jz short %%nodraw
    mov cx,[eax+ebx*2]
    mov [edi+%2],cx
%%nodraw
  %endif
%endmacro

%macro procpixelstr16x8b 3
    mov bl,[esi+%2]
    add bl,dl
    mov cx,[eax+ebx*2+512]
    mov [edi+%3],cx
%endmacro

%macro procpixelstt16x8b 3
  %if %2<8
    mov bl,[esi+%1]
    add bl,dl
    test bl,%3
    jz short %%nodraw
    mov cx,[eax+ebx*2+512]
    mov [edi+%2],cx
%%nodraw
  %endif
%endmacro

%macro procpixelsmst16x8b 3
    mov bl,[esi+%2]
    add bl,dl
    mov cx,[eax+ebx*2+512]
    mov [edi+%3],cx
    and ecx,[UnusedBitXor]
    mov [edi+%3+75036*2],cx
%endmacro

%macro procpixelstmst16x8b 3
  %if %2<8
    mov bl,[esi+%1]
    add bl,dl
    test bl,%3
    jz short %%nodraw
    mov cx,[eax+ebx*2+512]
    mov [edi+%2],cx
    and cx,[UnusedBitXor]
    mov [edi+%2+75036*2],cx
%%nodraw
  %endif
%endmacro

%macro procpixelsmsnt16x8b 3
    mov bl,[esi+%2]
    add bl,dl
    mov cx,[eax+ebx*2]
    mov [edi+%3],cx
    mov [edi+%3+75036*2],cx
%endmacro

%macro procpixelstmsnt16x8b 3
  %if %2<8
    mov bl,[esi+%1]
    add bl,dl
    test bl,%3
    jz short %%nodraw
    mov cx,[eax+ebx*2]
    mov [edi+%2],cx
    mov [edi+%2+75036*2],cx
%%nodraw
  %endif
%endmacro

%macro drawlineng16x816b 10
    ; tile value : bit 15 = flipy, bit 14 = flipx, bit 13 = priority value
    ;              bit 10-12 = palette, 0-9=tile#
    mov ebx,[ng16bbgval]
    mov dl,ch
    inc dword[bg1drwng+ebx*4]
    and ecx,3FFh
    and edx,1Fh
    add ecx,[ngptrdat2]
    add cx,[taddnfy16x16]
    test dword[vrama+eax],8000h
    jz short %%noflipy
    add cx,[taddfy16x16]
%%noflipy
    test dword[vrama+eax],4000h
    jz short %%noflipx
    inc cx
%%noflipx
%%nexttile
    push ecx
    push edx
    mov edx,[%6+edx*4]
    %7
    jnz near %%docache
%%returnfromcache
    cmp byte[%1+ecx],2
    je near %%done
    cmp byte[%1+ecx],0
    je near %%parttile
    %2
    ; start drawing from ecx
    test dword[vrama+eax],8000h
    jz short %%notflipyfull
    add ecx,[flipyposng]
    jmp %%yesflipyfull
%%notflipyfull
    add ecx,[yposng]
%%yesflipyfull
    test dword[vrama+eax],4000h
    jnz near %%flipxfull
    push eax
    mov esi,ecx
    xor ecx,ecx
    xor ebx,ebx
    mov eax,[CPalPtrng]
    %9 0,1,0
    %9 2,3,2
    %9 4,5,4
    %9 6,7,6
    pop eax
    jmp %%done
%%flipxfull
    push eax
    mov esi,ecx
    xor ecx,ecx
    xor ebx,ebx
    mov eax,[CPalPtrng]
    %9 7,6,0
    %9 5,4,2
    %9 3,2,4
    %9 1,0,6
    pop eax
    jmp %%done
%%parttile
    %2
    ; start drawing from ecx to edi
    test dword[vrama+eax],8000h
    jz short %%notflipypart
    add ecx,[flipyposng]
    jmp %%yesflipypart
%%notflipypart
    add ecx,[yposng]
%%yesflipypart
    test word[vrama+eax],4000h
    jnz near %%flipxpart
    push eax
    mov eax,[CPalPtrng]
    mov esi,ecx
    xor ebx,ebx
    %10 0,0,%8
    %10 1,0+75036*4,%8
    %10 2,2,%8
    %10 3,2+75036*4,%8
    %10 4,4,%8
    %10 5,4+75036*4,%8
    %10 6,6,%8
    %10 7,6+75036*4,%8
    pop eax
    jmp %%done
%%flipxpart
    push eax
    mov eax,[CPalPtrng]
    mov esi,ecx
    xor ebx,ebx
    %10 7,0,%8
    %10 6,0+75036*4,%8
    %10 5,2,%8
    %10 4,2+75036*4,%8
    %10 3,4,%8
    %10 2,4+75036*4,%8
    %10 1,6,%8
    %10 0,6+75036*4,%8
    pop eax
%%done
    pop edx
    pop ecx
    inc cx
    test dword[vrama+eax],4000h
    jz short %%noflipxb
    sub cx,2
%%noflipxb
    add edi,8
    xor dword[switch16x16],1
    jnz near %%nexttile
%%ntile
    mov ebx,[ng16bbgval]
    add ax,2
    inc dword[bg1totng+ebx*4]
    test eax,03Fh
    jz %%tileadd
%%next
    dec byte[tleftn]
    jnz near %4
    pop ebx
    cmp byte[curmosaicsz],1
    jne near domosaicng16b
    ret
%5
    add edi,16
    jmp %%ntile
%%docache
    call %3
    jmp %%returnfromcache
%%tileadd
    add ax,[bgtxadd]
    jmp %%next
%endmacro

%macro drawlinengom16b 11
    ; tile value : bit 15 = flipy, bit 14 = flipx, bit 13 = priority value
    ;              bit 10-12 = palette, 0-9=tile#
    mov ebx,[ng16bbgval]
    mov dl,ch
    inc dword[bg1drwng+ebx*4]
    and ecx,3FFh
    and edx,1Fh
    add ecx,[ngptrdat2]
    mov edx,[%6+edx*4]
    %7
    jnz near %%docache
%%returnfromcache
    cmp byte[%1+ecx],2
    je near %5
    cmp byte[%1+ecx],0
    je near %%parttile
    %2
    ; start drawing from ecx
    test dword[vrama+eax],8000h
    jz short %%notflipyfull
    add ecx,[flipyposng]
    jmp %%yesflipyfull
%%notflipyfull
    add ecx,[yposng]
%%yesflipyfull
    test dword[vrama+eax],4000h
    jnz near %%flipxfull
    push eax
    mov esi,ecx
    xor ecx,ecx
    xor ebx,ebx
    mov eax,[CPalPtrng]
    %9 0,1,0
    %9 2,3,4
    %9 4,5,8
    %9 6,7,12
    pop eax
    jmp %5
%%flipxfull
    push eax
    mov esi,ecx
    xor ecx,ecx
    xor ebx,ebx
    mov eax,[CPalPtrng]
    %9 7,6,0
    %9 5,4,4
    %9 3,2,8
    %9 1,0,12
    pop eax
    jmp %5
%%parttile
    %2
    ; start drawing from ecx to edi
    test dword[vrama+eax],8000h
    jz short %%notflipypart
    add ecx,[flipyposng]
    jmp %%yesflipypart
%%notflipypart
    add ecx,[yposng]
%%yesflipypart
    test word[vrama+eax],4000h
    jnz near %%flipxpart
    push eax
    mov eax,[CPalPtrng]
    mov esi,ecx
    xor ebx,ebx
    %10 0,0,%8
    %10 1,2,%8
    %10 2,4,%8
    %10 3,6,%8
    %10 4,8,%8
    %10 5,10,%8
    %10 6,12,%8
    %10 7,14,%8
    pop eax
    jmp %5
%%flipxpart
    push eax
    mov eax,[CPalPtrng]
    mov esi,ecx
    xor ebx,ebx
    %10 7,0,%8
    %10 6,2,%8
    %10 5,4,%8
    %10 4,6,%8
    %10 3,8,%8
    %10 2,10,%8
    %10 1,12,%8
    %10 0,14,%8
    pop eax
%5
    mov ebx,[ng16bbgval]
    add word[ofsmmptr],2
    inc dword[bg1totng+ebx*4]
    add word[ofsmtptr],2
    mov ax,[ofsmmptr]
    mov ebx,[yposngom]
    mov edx,[flipyposngom]
    mov [yposng],ebx
    mov [flipyposng],edx
    add edi,16
    test eax,03Fh
    jz near %%tileadd
%%next
    mov ebx,[ofsmcptr]
    add ebx,[ofsmcptr2]
    mov ecx,[ofsmval]
    add dword[ofshvaladd],8
%if %11=4
    test dword[ebx-40h],8000h
    jz near %%noofsm
    test dword[ebx-40h],ecx
    jz %%noofsm
    mov ebx,[ebx-40h]
%else
    test dword[ebx],ecx
    jz %%noofsm
    mov ebx,[ebx]
%endif
    mov ax,[ofsmtptr]
    and ebx,3FFh
    add ebx,[ofsmcyps]
    test ebx,100h
    jz short %%noupper
    add ax,[ofsmady]
%%noupper
    and ebx,0FFh
    mov edx,ebx
    shr ebx,3
    and edx,07h
    shl ebx,6
    shl edx,3
    add ax,bx
    mov [yposng],edx
    xor edx,38h
    mov [flipyposng],edx
%%noofsm
    mov ebx,[ofsmcptr]
    add ebx,[ofsmcptr2]
    add dword[ofsmcptr2],2
    mov ecx,[ofsmvalh]
    and dword[ofsmcptr2],3Fh
    test dword[ofsmcptr2],3Fh
    jnz short %%notzeroed
    mov dx,[bgtxadd2]
    add word[ofsmcptr],dx
%%notzeroed
%if %11=4
    test dword[ebx-40h],8000h
    jnz near %%noofsmh
%endif
    test dword[ebx-40h],ecx
    jz %%noofsmh
    mov ebx,[ebx-40h]
    sub ax,[ofsmtptr]
    add ax,[ofsmtptrs]
    add ebx,[ofshvaladd]
    test ebx,100h
    jz short %%noleft
    add ax,[ofsmadx]
%%noleft
    and ebx,0F8h
    shr ebx,2
    add ax,bx
%%noofsmh
    dec byte[tleftn]
    jnz near %4
%%fin
    pop ebx
    cmp byte[curmosaicsz],1
    jne near domosaicng16b
    ret
%%docache
    call %3
    jmp %%returnfromcache
%%tileadd
    mov bx,[bgtxadd]
    add ax,bx
    add [ofsmmptr],bx
    add word[ofsmtptr],bx
    jmp %%next
%endmacro

%macro drawlinengom16b16x16 11
    ; tile value : bit 15 = flipy, bit 14 = flipx, bit 13 = priority value
    ;              bit 10-12 = palette, 0-9=tile#
    mov ebx,[ng16bbgval]
    mov dl,ch
    inc dword[bg1drwng+ebx*4]
    and ecx,3FFh
    and edx,1Fh
    add ecx,[ngptrdat2]
    add cx,[taddnfy16x16]
    test dword[vrama+eax],8000h
    jz short %%noflipy
    add cx,[taddfy16x16]
%%noflipy
    test dword[vrama+eax],4000h
    jz short %%noflipx
    inc cx
%%noflipx
    test dword[switch16x16],1
    jz short %%noflipxb
    inc cx
    test dword[vrama+eax],4000h
    jz short %%noflipxb
    sub cx,2
%%noflipxb
%%nexttile
    push ecx
    push edx
    mov edx,[%6+edx*4]
    %7
    jnz near %%docache
%%returnfromcache
    cmp byte[%1+ecx],2
    je near %%done
    cmp byte[%1+ecx],0
    je near %%parttile
    %2
    ; start drawing from ecx
    test word[vrama+eax],8000h
    jz short %%noflipyfull
    add ecx,[flipyposng]
    jmp %%yesflipyfull
%%noflipyfull
    add ecx,[yposng]
%%yesflipyfull
    test dword[vrama+eax],4000h
    jnz near %%flipxfull
    push eax
    mov esi,ecx
    xor ecx,ecx
    xor ebx,ebx
    mov eax,[CPalPtrng]
    %9 0,1,0
    %9 2,3,4
    %9 4,5,8
    %9 6,7,12
    pop eax
    jmp %%done
%%flipxfull
    push eax
    mov esi,ecx
    xor ecx,ecx
    xor ebx,ebx
    mov eax,[CPalPtrng]
    %9 7,6,0
    %9 5,4,4
    %9 3,2,8
    %9 1,0,12
    pop eax
    jmp %%done
%%parttile
    %2
    ; start drawing from ecx to edi
    test word[vrama+eax],8000h
    jz short %%noflipypart
    add ecx,[flipyposng]
    jmp %%yesflipypart
%%noflipypart
    add ecx,[yposng]
%%yesflipypart
    test word[vrama+eax],4000h
    jnz near %%flipxpart
    push eax
    mov eax,[CPalPtrng]
    mov esi,ecx
    xor ebx,ebx
    %10 0,0,%8
    %10 1,2,%8
    %10 2,4,%8
    %10 3,6,%8
    %10 4,8,%8
    %10 5,10,%8
    %10 6,12,%8
    %10 7,14,%8
    pop eax
    jmp %%done
%%flipxpart
    push eax
    mov eax,[CPalPtrng]
    mov esi,ecx
    xor ebx,ebx
    %10 7,0,%8
    %10 6,2,%8
    %10 5,4,%8
    %10 4,6,%8
    %10 3,8,%8
    %10 2,10,%8
    %10 1,12,%8
    %10 0,14,%8
    pop eax
%%done
    pop edx
    pop ecx
%5
    test byte[switch16x16],1
    jz short %%skip
    add word[ofsmmptr],2
    add word[ofsmtptr],2
%%skip
    mov ax,[ofsmmptr]
    mov ebx,[ng16bbgval]
    inc dword[bg1totng+ebx*4]
    mov ebx,[yposngom]
    mov edx,[flipyposngom]
    mov [yposng],ebx
    mov [flipyposng],edx
    test byte[switch16x16],1
    jz short %%next
    test eax,03Fh
    jz near %%tileadd
%%next
    mov ebx,[ofsmcptr]
    add ebx,[ofsmcptr2]
    mov ecx,[ofsmval]
    add dword[ofshvaladd],8
%if %11=4
    test dword[ebx-40h],8000h
    jz near %%noofsm
    test dword[ebx-40h],ecx
    jz near %%noofsm
    mov ebx,[ebx-40h]
%else
    test dword[ebx],ecx
    jz %%noofsm
    mov ebx,[ebx]
%endif
    mov ax,[ofsmtptr]
    and ebx,3FFh
    add ebx,[ofsmcyps]
    test ebx,200h
    jz short %%noupper
    add ax,[ofsmady]
%%noupper
    and ebx,01FFh
    mov dword[taddnfy16x16],0
    mov dword[taddfy16x16],16
    test ebx,8
    jz short %%noflipy16x16
    mov dword[taddnfy16x16],16
    mov dword[taddfy16x16],-16
%%noflipy16x16
    mov edx,ebx
    shr ebx,4
    and edx,07h
    shl ebx,6
    shl edx,3
    add ax,bx
    mov [yposng],edx
    xor edx,38h
    mov [flipyposng],edx
%%noofsm
    mov ebx,[ofsmcptr]
    add ebx,[ofsmcptr2]
    add dword[ofsmcptr2],2
    mov ecx,[ofsmvalh]
    and dword[ofsmcptr2],3Fh
    test dword[ofsmcptr2],3Fh
    jnz short %%notzeroed
    mov dx,[bgtxadd2]
    add word[ofsmcptr],dx
%%notzeroed
%if %11=4
    test dword[ebx-40h],8000h
    jnz near %%noofsmh
%endif
    test dword[ebx-40h],ecx
    jz %%noofsmh
    mov ebx,[ebx-40h]
    sub ax,[ofsmtptr]
    add ax,[ofsmtptrs]
    add ebx,[ofshvaladd]
    test ebx,200h
    jz short %%noleft
    add ax,[ofsmadx]
%%noleft
    and ebx,0F8h
    shr ebx,2
    add ax,bx
%%noofsmh
    add edi,16
    xor dword[switch16x16],1
    jnz near %4
    dec byte[tleftn]
    jnz near %4
    pop ebx
    cmp byte[curmosaicsz],1
    jne near domosaicng16b
    ret
%%docache
    call %3
    jmp %%returnfromcache
%%tileadd
    mov bx,[bgtxadd]
    add ax,bx
    add [ofsmmptr],bx
    add word[ofsmtptr],bx
    jmp %%next
%endmacro
